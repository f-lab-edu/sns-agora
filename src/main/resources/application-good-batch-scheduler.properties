using.spring.schedulerFactory=true

# 스케줄러의 이름을 설정한다.
org.quartz.scheduler.instanceName=Good_Batch_Scheduler

# 어떠한 문자열도 가능하지만 고유해야 한다.
# AUTO 를 넣으면 자동으로 생성한다.
org.quartz.scheduler.instanceId=AUTO

# thread pool 에 총 3개의 Thread 가 존재하도록 설정한다. 동시에 3개의 Thread 가 작업 가능하다.
org.quartz.threadPool.threadCount=1

# RAMJobStore: 기본 값으로 메모리에 스케줄 정보를 저장한다.
# 메모리에 저장하기 때문에 성능면에서는 제일 좋지만, 시스템 문제 발생시 스케줄 데이터를 유지하지 못하는 단점이 있다.

# JDBCJobStore: 스케줄 정보를 DB에 저장한다.
# 시스템이 셧다운되더라도 스케줄 정보는 유지되어 시스템 재시작시 다시 Job 실행을 할 수 있다.
# 관계형 데이터베이스 내에 스케줄링 정보 (작업, 트리거 및 달력)를 저장하는 데 사용됩니다.
# 다른 기타 JobStore
# Quartz JobStore 을 확장하여 다른 저장소(Redis, MongoDB)에도 저장할 수 있다.(#RedisJobStore, MongoDBJobStore)
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.useProperties=true
org.quartz.jobStore.isClustered=true
org.quartz.jobStore.misfireThreshold=1100
org.quartz.jobStore.clusterCheckinInterval=15000
org.quartz.jobStore.acquireTriggersWithinLock=true
spring.quartz.jdbc.initialize-schema=always
spring.quartz.job-store-type=jdbc

