<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ht.project.snsproject.mapper.FeedMapper">

    <insert id="feedUpload" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.ht.project.snsproject.model.feed.FeedInsert">
        INSERT INTO feeds(userId, title, content, date, publicScope)
        VALUES(#{userId}, #{title}, #{content}, #{date}, #{publicScope})
    </insert>

    <select id="getFeed" parameterType="com.ht.project.snsproject.model.feed.FeedParam"
            resultType="com.ht.project.snsproject.model.feed.FeedInfo">
        SELECT a.id, a.userId,
        a.title, a.content,
        a.date, a.publicScope,
        b.filePath, GROUP_CONCAT(DISTINCT b.fileName ORDER BY b.fileIndex) AS fileNames,
        COUNT(DISTINCT c.userId) AS goodPushed
        FROM feeds a
        LEFT JOIN images b
        ON (a.id = b.feedId)
        LEFT JOIN goods c
        ON (a.id = c.feedId AND c.userId = #{userId})
        WHERE a.id = #{id}
        AND (a.publicScope = 'ALL'
        <if test="friendStatus.name() == 'ME'">
            OR a.publicScope = 'FRIENDS'
            OR a.publicScope = 'ME'
        </if>
        <if test="friendStatus.name() == 'FRIEND'">
            OR a.publicScope = 'FRIENDS'
        </if>
        )
    </select>

    <!--LEFT JOIN 사용 이유
        - 피드를 가져오기 위해서는 피드 정보와 파일정보를 동시에 가져와야하기 때문에
          JOIN 을 사용하여 feeds 테이블과 images 테이블의 정보들을 조회하고자 하였습니다.
        - INNER JOIN 을 사용하지 않고, LEFT JOIN 을 사용한 이유는
          모든 피드가 파일 정보를 포함하지 않기 때문에 피드 정보만을 조회할 수 있도록 하기 위해서는
          LEFT JOIN 을 통해 조회해야겠다고 생각하여 사용하게 되었습니다.-->
    <select id="getFeedList" parameterType="com.ht.project.snsproject.model.feed.FeedListParam"
            resultType="com.ht.project.snsproject.model.feed.FeedInfo">
        SELECT a.id, a.userId,
        a.title, a.content,
        a.date, a.publicScope,
        b.filePath,
        GROUP_CONCAT(DISTINCT b.fileName ORDER BY b.fileIndex) AS fileNames,
        COUNT(DISTINCT c.userId) AS goodPushed
        FROM feeds a
        LEFT JOIN images b
        ON (a.id = b.feedId)
        LEFT JOIN goods c
        ON (a.id = c.feedId AND c.userId = #{userId})
        WHERE a.userId = #{targetId}
        AND (a.publicScope = 'ALL'
        <if test="publicScope.name() == 'FRIENDS' or publicScope.name() == 'ME'">
            OR a.publicScope = 'FRIENDS'
        </if>
        <if test="publicScope.name() == 'ME'">
            OR a.publicScope = 'ME'
        </if>
        )
        <if test="pagination.cursor != null">
            AND a.id<![CDATA[<]]>#{pagination.cursor}
        </if>
        GROUP BY a.id
        ORDER BY a.id DESC
        LIMIT #{pagination.listSize}
    </select>

    <select id="getFriendsFeedList"
            parameterType="com.ht.project.snsproject.model.feed.FriendsFeedList"
            resultType="com.ht.project.snsproject.model.feed.FeedInfo">

        SELECT a.id, a.userId,
        a.title, a.content,
        a.date, a.publicScope,
        b.filePath,
        GROUP_CONCAT(DISTINCT b.fileName ORDER BY b.fileIndex) AS fileNames,
        COUNT(DISTINCT d.userId) AS goodPushed
        FROM feeds a INNER JOIN images b
        ON (a.id = b.feedId)
        LEFT JOIN friends c
        ON(a.userId = c.userId)
        LEFT JOIN goods d
        ON (a.id = d.feedId AND d.userId = #{userId})
        WHERE (a.publicScope = 'ALL'
        OR a.publicScope = 'FRIENDS')
        AND (c.targetId = #{userId})
        <if test="pagination.cursor != null">
            AND a.id<![CDATA[<]]>#{pagination.cursor}
        </if>
        GROUP BY a.id
        ORDER BY a.id DESC
        LIMIT #{pagination.listSize}
    </select>

    <delete id="deleteFeed" parameterType="com.ht.project.snsproject.model.feed.FeedDeleteParam">
        DELETE FROM feeds
        WHERE id = #{id} AND userId = #{userId}
    </delete>

    <update id="updateFeed" parameterType="com.ht.project.snsproject.model.feed.FeedUpdate">
        UPDATE feeds
        SET title = #{title},
        content = #{content},
        date = #{date},
        publicScope = #{publicScope}
        WHERE id = #{id} AND userId=#{userId}
    </update>
</mapper>